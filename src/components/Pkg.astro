---
// https://github.com/withastro/starlight/blob/main/packages/starlight/user-components/Tabs.astro

import { type CommandOptions, type CommandType, getCommands } from '@libs/pkg'
import { Code } from 'astro-expressive-code/components'

interface Props extends CommandOptions {
  pkg?: string | undefined
  type?: CommandType
}

const { pkg, type = 'add', ...options } = Astro.props

const commands = getCommands(type, pkg, options)
---

<pkg-tabs class="not-prose">
  <ul role="tablist">
    {
      commands.map(({ label, panelID, tabID }, index) => (
        <li role="presentation">
          <a role="tab" href={`#${panelID}`} id={tabID} aria-selected={index === 0} tabindex={index === 0 ? 0 : -1}>
            {label}
          </a>
        </li>
      ))
    }
  </ul>
  {
    commands.map(({ content, panelID, tabID }, index) => (
      <section role="tabpanel" id={panelID} aria-labelledby={tabID} hidden={index > 0}>
        <Code code={content} frame="none" lang="shell" />
      </section>
    ))
  }
</pkg-tabs>

<style>
  pkg-tabs {
    display: block;
    margin-top: var(--size-6);
  }

  ul {
    --color-highlight: hsl(70 5% 22% / 0.56);
    --color-seperator: hsl(0 0% 94%);

    :global(:root[data-theme='dark']) & {
      --color-highlight: hsl(47 12% 85% / 0.56);
      --color-seperator: hsl(0 0% 10%);
    }

    border: 1px solid var(--color-gray-800);
    border-bottom-color: var(--color-seperator);
    border-radius: calc(var(--rounded) + 1px);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    display: flex;
    font-size: var(--text-sm);
    list-style: none;
    overflow-x: auto;
  }

  a {
    border-radius: var(--rounded) var(--rounded) 0 0;
    color: var(--color-gray-400);
    display: block;
    padding: var(--size-1) var(--size-3);

    &:focus-visible {
      outline: var(--outline-width) solid var(--color-text-highlight);
      outline-offset: calc(var(--outline-offset) * -1);
    }
  }

  a[aria-selected] {
    --color-text: hsl(70 5% 22%);

    :global(:root[data-theme='dark']) & {
      --color-text: hsla(46 19% 83% / 0.93);
    }

    background-color: var(--color-bg-code-block);
    color: var(--color-text);
    overflow: hidden;
    position: relative;

    &::after {
      border-top: 2px solid var(--color-text);
      content: '';
      inset: 0;
      position: absolute;
    }
  }

  pkg-tabs.not-prose :global(.expressive-code) {
    margin-top: 0;

    & :global(pre) {
      border-top: none;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }
</style>

<script>
  customElements.define(
    'pkg-tabs',
    class PkgTabs extends HTMLElement {
      #panels: HTMLElement[]
      #tabs: HTMLAnchorElement[]

      constructor() {
        super()

        this.#panels = [...this.querySelectorAll<HTMLElement>('[role="tabpanel"]')]
        this.#tabs = [...this.querySelectorAll<HTMLAnchorElement>('[role="tab"]')]

        for (const [index, tab] of this.#tabs.entries()) {
          tab.addEventListener('click', (event) => {
            if (!(event.currentTarget instanceof HTMLAnchorElement)) {
              return
            }

            event.preventDefault()

            if (event.currentTarget !== this.querySelector('[aria-selected]')) {
              this.#showTabPanelAtIndex(event.currentTarget, index)
            }
          })

          tab.addEventListener('keydown', (event) => {
            if (!(event.currentTarget instanceof HTMLAnchorElement)) {
              return
            }

            const index = this.#tabs.indexOf(event.currentTarget)
            let nextIndex: number | null = null

            switch (event.key) {
              case 'ArrowLeft': {
                nextIndex = index - 1
                break
              }
              case 'ArrowRight': {
                nextIndex = index + 1
                break
              }
              case 'Home': {
                nextIndex = 0
                break
              }
              case 'End': {
                nextIndex = this.#tabs.length - 1
                break
              }
            }

            if (nextIndex === null) return

            const nextTab = this.#tabs[nextIndex]

            if (!nextTab) return

            event.preventDefault()

            this.#showTabPanelAtIndex(nextTab, nextIndex)
          })
        }
      }

      #showTabPanelAtIndex(tab: HTMLAnchorElement, index: number) {
        for (const tab of this.#tabs) {
          tab.removeAttribute('aria-selected')
          tab.setAttribute('tabindex', '-1')
        }

        for (const panel of this.#panels) {
          panel.hidden = true
        }

        const panel = this.#panels[index]

        if (panel) {
          panel.hidden = false
        }

        tab.removeAttribute('tabindex')
        tab.setAttribute('aria-selected', 'true')
        tab.focus()
      }
    },
  )
</script>
