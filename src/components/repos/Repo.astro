---
import RepoLink from '@components/repos/RepoLink.astro'
import Icon from '@components/ui/Icon.astro'
import Tag from '@components/ui/Tag.astro'
import VisuallyHidden from '@components/ui/VisuallyHidden.astro'
import type { GitHubRepo } from '@libs/github'
import { pluralize } from '@libs/string'

export interface Props {
  repo: GitHubRepo
}

const { repo } = Astro.props

const shouldShowStars = repo.stars > 0

const listFormatter = new Intl.ListFormat('en', { style: 'short', type: 'conjunction' })

function normalizeDescription(description: string | null) {
  return description?.replace(/\.$/, '')
}
---

<RepoLink class="link" href={repo.url} title={`Open ${repo.name} GitHub repository`}>
  <VisuallyHidden>
    {repo.name} - {shouldShowStars ? `Starred ${repo.stars} ${pluralize(repo.stars, 'time', 'times')} - ` : ''}{
      repo.description
    } - Built with {listFormatter.format(repo.languages.map((language) => language.name))}.
  </VisuallyHidden>
  <div aria-hidden="true" class="name">
    <strong>{repo.name}</strong>
    {
      shouldShowStars ? (
        <div class="stars">
          {repo.stars}
          <Icon class="starIcon" name="star" />
        </div>
      ) : null
    }
  </div>
  <div aria-hidden="true" class="description">{normalizeDescription(repo.description)}</div>
  <ul aria-hidden="true" class="languages">
    {repo.languages.map((language) => <Tag color={language.color}>{language.name}</Tag>)}
  </ul>
</RepoLink>

<style>
  .link {
    padding: var(--size-3);
    padding-bottom: var(--size-4);

    @media (--motionSafe) {
      &:hover svg {
        animation-play-state: running;
      }
    }
  }

  .name {
    display: flex;
    gap: var(--size-4);
    justify-content: space-between;

    & strong {
      font-weight: var(--font-semibold);
      font-size: var(--text-xl);
    }
  }

  .stars {
    align-items: center;
    background-color: var(--bg-color);
    color: var(--color-dimmed);
    display: flex;
    font-weight: var(--font-medium);
  }

  .starIcon {
    --size: var(--size-4);

    fill: currentColor;
    height: var(--size);
    margin-left: 0.375rem;
    position: relative;
    top: var(--size-npx);
    width: var(--size);

    @media (--motionSafe) {
      animation: spin var(--duration-3000) linear infinite;
      animation-play-state: paused;
    }
  }

  .description {
    color: var(--color-dimmed);
    display: -webkit-box;
    flex-grow: 1;
    font-size: 0.95rem;
    line-height: var(--line-height-6);
    margin-block: var(--size-2) 0.75rem;
    overflow: hidden;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }

  .languages {
    display: flex;
    gap: var(--size-4);
    overflow-x: auto;
    padding-bottom: var(--size-1);
    scrollbar-width: none;

    &::-webkit-scrollbar {
      height: 0;
      width: 0;
    }
  }

  @keyframes spin {
    to {
      transform: rotate(1turn);
    }
  }
</style>
