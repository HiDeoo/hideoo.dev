---
import Section from '@components/ui/Section.astro'
import Tag from '@components/ui/Tag.astro'
import { getLanguageDimmedColors } from '@libs/color'
import { type LanguageStats } from '@libs/github'

export interface Props {
  stats: LanguageStats
}

const { stats } = Astro.props

const entryCount = stats.length
const totalSize = stats.reduce((acc, stat) => acc + stat.size, 0)
let chartBarIndex = 1

const hoverAnimationCss = stats.map(
  (stat) => `html:has(.legend li[data-language="${stat.name}"]:hover) .bar[data-language="${stat.name}"] {
  animation-play-state: running;
}
`
)
---

<Section title="Recent Languages">
  <div aria-hidden="true" class="chart">
    {
      stats.map((stat) => {
        const dimmedColors = getLanguageDimmedColors(stat.color)

        const barStyle = {
          '--bar-color': stat.color,
          '--bar-color-dimmed-dark': dimmedColors.dark,
          '--bar-color-dimmed-light': dimmedColors.light,
          '--bar-tick-start': chartBarIndex,
          '--bar-tick-end': chartBarIndex + stat.size,
        }

        chartBarIndex += stat.size

        return <div class="bar" data-language={stat.name} style={barStyle} />
      })
    }
  </div>
  <ul class="legend">
    {
      stats.map((stat) => (
        <Tag color={stat.color} class="tag" data-language={stat.name}>
          {stat.name}
        </Tag>
      ))
    }
  </ul>
</Section>

<style is:inline set:html={hoverAnimationCss}></style>

<style define:vars={{ 'chart-ticks': totalSize, 'legend-size': entryCount }}>
  .chart {
    display: grid;
    grid-template-columns: repeat(var(--chart-ticks), 1fr);
    margin-top: var(--size-1);
    outline: 2px solid var(--color-dimmed);
    outline-offset: -2px;
    padding: 5px;
    position: relative;
  }

  .bar {
    --stripe-color: var(--bar-color-dimmed-light);

    :is(html.dark) & {
      --stripe-color: var(--bar-color-dimmed-dark);
    }

    background: var(--bar-color)
      repeating-linear-gradient(-45deg, var(--stripe-color) 0, var(--stripe-color) 25%, transparent 0, transparent 50%)
      0 0 / var(--size-8) var(--size-8);
    border-right: 3px solid var(--bg-color);
    grid-column-end: var(--bar-tick-end);
    grid-column-start: var(--bar-tick-start);
    height: var(--size-7);

    @media (--motionSafe) {
      animation: stripe var(--duration-3000) linear infinite;
      animation-play-state: paused;
    }

    &:last-child {
      border-right: none;
    }
  }

  .legend {
    display: grid;
    gap: var(--size-4);
    grid-template-columns: repeat(2, 1fr);
    justify-content: space-between;
    margin-top: var(--size-4);
    padding-right: 4px;
    padding-bottom: var(--size-2);

    @media (--sm-n-above) {
      grid-template-columns: repeat(4, 1fr);
    }

    @media (--md-n-above) {
      grid-template-columns: repeat(var(--legend-size), 1fr);
    }
  }

  .tag {
    background: linear-gradient(
        90deg,
        var(--tag-color) 0,
        var(--tag-color) 50%,
        var(--bg-color) 50%,
        var(--bg-color) 100%
      )
      100% 0 / 200% 100%;
    cursor: default;

    @media (--motionSafe) {
      transition: background-position var(--duration-500) var(--ease), border-color var(--duration-300) var(--ease),
        color var(--duration-300) var(--ease);

      &::after {
        transition: transform var(--duration-400) var(--ease);
      }

      &:hover {
        background-position: 0;
        border-color: var(--color);
        color: var(--zinc-50);

        &::after {
          transform: translate3d(calc(var(--offset) * -1), calc(var(--offset) * -1), -1px);
        }
      }
    }
  }

  @keyframes stripe {
    to {
      background-position: var(--size-17);
    }
  }
</style>
