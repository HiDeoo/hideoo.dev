---
import '../styles/theme.css'
import '../styles/global.css'
---

<title>HiDeoo</title>

<meta charset="utf8" />
<meta name="color-scheme" content="dark light" />
<meta name="description" content="// TODO" />
<meta name="theme-color" media="(prefers-color-scheme: dark)" content="// TODO" />
<meta name="theme-color" media="(prefers-color-scheme: light)" content="// TODO" />
<meta name="viewport" content="width=device-width, initial-scale=1" />

<link rel="icon" href="/images/favicon.ico" sizes="any" />
<link rel="icon" href="/images/favicon.svg" type="image/svg+xml" />

{
  /**
   * Inlined to avoid a FOUC.
   *
   * - We do not care if localStorage is not available when saving a theme preference.
   * - When applying the theme during the first evaluation, the toggle theme button is not yet rendered so we cannot
   *  update its aria-label. We have to wait for the window `load` event to do so.
   */
}
<script is:inline>
  const themeName = { dark: 'dark', light: 'light' }
  const themeKey = 'theme'
  let theme = getTheme()

  function getTheme() {
    try {
      const persistedTheme = localStorage.getItem(themeKey)
      const preferDarkTheme = window.matchMedia('(prefers-color-scheme: dark)')

      if (persistedTheme === themeName.dark || (!persistedTheme && preferDarkTheme.matches)) {
        return themeName.dark
      }

      return themeName.light
    } catch {
      return themeName.light
    }
  }

  function applyTheme() {
    if (theme === themeName.dark) {
      document.documentElement.classList.add(themeName.dark)
    } else {
      document.documentElement.classList.remove(themeName.dark)
    }

    document.querySelector('#theme-toggle')?.setAttribute('aria-label', `${theme} theme`)
  }

  function updateTheme(newThemeName) {
    theme = newThemeName

    applyTheme()

    try {
      localStorage.setItem(themeKey, newThemeName)
    } catch {}
  }

  applyTheme()

  window.addEventListener('load', () => {
    applyTheme()
  })

  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (event) => {
    theme = event.matches ? themeName.dark : themeName.light

    applyTheme()
  })
</script>
