---
import Link from './Link.astro'

export interface Props {
  as?: keyof astroHTML.JSX.IntrinsicElements
  class?: string
  href?: string
  target?: astroHTML.JSX.AnchorHTMLAttributes['target']
  title?: string
}

const { as, class: className, href, target, title } = Astro.props

// https://github.com/withastro/astro/blob/63cd9d89e8b83ce5e39cdae84a8342e28d1940cc/packages/astro/astro-jsx.d.ts#L34-L36
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const Element: any = as ?? 'div'

const isLink = typeof href === 'string'
---

<Element class:list={['card', { 'card-link': isLink }, className]}>
  {
    isLink ? (
      <Link href={href} target={target} title={title} class="card-link">
        <slot />
      </Link>
    ) : (
      <slot />
    )
  }
</Element>

<style>
  @import 'open-props/media';

  .card {
    background-color: var(--card-bg-color);
    border: var(--border-size-1) solid var(--card-border-color);
    border-radius: var(--radius-2);
    color: var(--card-color);
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .card-link {
    display: flex;
    flex-direction: column;
    flex-grow: 1;

    &::after {
      --offset: var(--size-1);

      background-color: var(--card-border-color);
      border-radius: var(--radius-2);
      content: '';
      height: 100%;
      left: var(--offset);
      opacity: 0;
      top: var(--offset);
      position: absolute;
      width: 100%;
      z-index: -1;
    }

    &:hover::after {
      @media (--motionOK) {
        animation: var(--animation-fade-in) forwards;
        animation-timing-function: var(--ease-out-1);
      }

      @media (--motionNotOK) {
        opacity: 1;
      }
    }

    & :global(a:focus-visible) {
      border-radius: var(--radius-2);
      outline: 3px solid var(--color);
    }
  }
</style>
