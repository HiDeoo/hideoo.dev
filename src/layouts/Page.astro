---
import '@unocss/reset/tailwind.css'

import Head, { type HeadProps } from '@components/Head.astro'
import Footer from '@components/ui/Footer.astro'
import Header from '@components/ui/header/Header.astro'
import Icons from '@components/ui/Icons.astro'
import SkipLink from '@components/ui/SkipLink.astro'
import VisuallyHidden from '@components/ui/VisuallyHidden.astro'

export interface Props extends Omit<HeadProps, 'metaDescription'> {
  title: string
  titleVisibility: 'hidden' | 'visible'
}

const { title, titleVisibility, ...headProps } = Astro.props
---

<!doctype html>
<html lang="en">
  <head>
    {/* https://github.com/withastro/prettier-plugin-astro/issues/316#issuecomment-1400808708 */}
    {() => <Head {...headProps} metaDescription={title} />}
  </head>
  <body>
    <SkipLink />
    <Icons />
    <Header />
    <div class="frame">
      <main id="content">
        {
          titleVisibility === 'visible' ? (
            <h1 class="title">{title}</h1>
          ) : (
            <VisuallyHidden>
              <h1>{title}</h1>
            </VisuallyHidden>
          )
        }
        <slot />
      </main>
    </div>
    <Footer />
  </body>
</html>

<style>
  :where(html) {
    color-scheme: light;

    --color-white: hsl(0 0% 0%);
    --color-gray-300: hsl(240 3% 18%);
    --color-gray-400: hsl(240 6% 41%);
    --color-gray-500: hsl(240 8% 64%);
    --color-gray-700: hsl(240 14% 80%);
    --color-gray-800: hsl(240 19% 84%);
    --color-gray-900: hsl(240 26% 95%);
    --color-black: hsl(0 0% 98%);
  }

  :where(html)[data-theme='dark'] {
    color-scheme: dark;

    --color-white: hsl(0 0% 98%);
    --color-gray-300: hsl(240 4% 84%);
    --color-gray-400: hsl(240 2% 63%);
    --color-gray-500: hsl(240 6% 41%);
    --color-gray-700: hsl(240 12% 25%);
    --color-gray-800: hsl(240 12% 19%);
    --color-gray-900: hsl(240 11% 9%);
    --color-black: hsl(220 11% 5%);
  }

  :where(html) {
    --color-bg: var(--color-black);
    --color-text: var(--color-gray-300);
    --color-text-highlight: var(--color-white);

    --duration-300: 300ms;
    --duration-400: 400ms;
    --duration-1200: 1200ms;
    --duration-3000: 3000ms;

    --ease: cubic-bezier(0.25, 0, 0.3, 1);
    --ease-elastic: cubic-bezier(0.5, 1.25, 0.75, 1.25);
    --ease-out: cubic-bezier(0, 0, 0, 1);

    --font-base: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue',
      Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';

    --font-weight-base: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --font-weight-extrabold: 800;

    --outline-offset-base: 2px;
    --outline-offset-lg: 4px;
    --outline-width: 2px;

    --rounded-sm: 0.125rem;
    --rounded-base: 0.25rem;
    --rounded-lg: 0.5rem;
    --rounded-full: 1e5px;

    --size-npx: -1px;
    --size-px: 1px;
    --size-0-5: 0.125rem;
    --size-1: 0.25rem;
    --size-1-5: 0.375rem;
    --size-2: 0.5rem;
    --size-3: 0.75rem;
    --size-4: 1rem;
    --size-5: 1.15rem;
    --size-6: 1.5rem;
    --size-8: 2rem;
    --size-12: 3rem;

    --text-sm: 0.9375rem;
    --text-base: 1rem;
    --text-lg: 1.125rem;
    --text-xl: 1.25rem;
    --text-2xl: 1.5rem;
    --text-3xl: 1.875rem;
    --text-4xl: 2.25rem;

    --header-button-size: var(--size-8);

    --page-max-width: 48rem;
    --page-padding-inline: var(--size-4);

    --content-padding-block: var(--page-padding-inline);

    @media (--md-n-above) {
      --page-padding-inline: var(--size-12);
    }
  }

  body {
    background-color: var(--color-bg);
    color: var(--color-text);
    font-family: var(--font-base);
    line-height: 1.8;
  }

  .frame {
    display: flex;
    justify-content: center;
    padding: var(--content-padding-block) var(--page-padding-inline);
  }

  main {
    max-width: var(--page-max-width);
    width: 100%;
  }

  html[data-transition-disabled='true'] :global(main *) {
    transition: none !important;
  }

  h1:not(:where(.visually-hidden *)),
  :global(h2:not(:where(.prose *))) {
    font-size: var(--text-3xl);
    font-weight: var(--font-weight-extrabold);
    line-height: 1.25;
    margin-bottom: var(--size-6);
    overflow-wrap: anywhere;
    text-wrap: balance;

    @media (--md-n-above) {
      font-size: var(--text-4xl);
      margin-bottom: var(--size-8);
    }
  }

  :global(p a) {
    color: var(--color-text-highlight);
    text-decoration: underline;
    text-decoration-color: var(--color-gray-500);
    text-underline-offset: var(--size-0-5);

    @media (--motionSafe) {
      transition: text-decoration-color var(--duration-300) var(--ease);
    }

    &:hover {
      text-decoration-color: var(--color-text-highlight);
    }

    &:focus-visible {
      border-radius: var(--rounded-sm);
      outline: var(--outline-width) solid var(--color-text-highlight);
      outline-offset: var(--size-px);
      text-decoration: none;
    }
  }

  :global(::selection) {
    background-color: var(--color-gray-700);
  }
</style>
